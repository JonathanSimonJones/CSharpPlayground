Instantiate - Instantiating a class means to create a new instance of the class. 
				The process of creating an object, typically using the new keyword
				https://stackoverflow.com/questions/32290879/meanings-of-declaring-instantiating-initializing-and-assigning-an-object


is loose coupling more important than enforcement of interface?

Statements/Expressions/Operators
	An anonymous function is an 'inline' statement or expression that can be used wherever
	a delegate type is expected. You can use it to initialise a named delegate or pass
	it instead of a named delegate type as a method parameter.
	
Methods
	In a method, parameters are types and names given in the definition of the method 
	signature.
	Arguments are the values passed into the method once it is invoked. 
	Value types are passed by value in arguments.
	Reference types pass a reference to the object in arguments. e.g The location of the
	object. 
	"C# passes all reference types by value ... " https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/methods accessed on 2018-12-28
	If a method returns void or is an async method, then the body of the method must be a 
	statement expression. A statement expression is a statement which includes a expression
	and stores the calculated value in a variable. 


Strings
	Use @ for literals
	Use stringbuilder if a string is likely to change. Use string for constant strings.
	Use escape sequence \u for fully qualified unicode e.g. \u0041 == "A"
	Or use \x for either fully qualified or not e.g \x41 and \x0041 both equal "A"

C# 7.0 
	return by reference
	using types in switches

Enums
	The default behavior of the ToString method for an enumeration value is to return the 
	string representation of the value.

Null
	The null keyword is a literal that represents a null reference, one that does not refer 
	to any object. null is the feault value of reference-type variable. Ordinary types 
	cannot be null. However C# 2.0 introduced nullable value types. 

@ 
	Can be used to enable C# keywords to be used as identifiers
		int @for = 2;
		Console.Write(@for);
	To indicate a string literal should be intepreted verbatim. 